AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: Custom AWS CodePipeline action that enables EC2 build nodes.
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "General"
        Parameters: 
          - ProjectId
      - Label: 
          default: "Custom Action Settings"
        Parameters: 
          - CustomActionProviderName
          - CustomActionProviderCategory
          - CustomActionProviderVersion
    ParameterLabels: 
      ProjectId:         
        default: "Project ID"
      CustomActionProviderName:
        default: "Custom Action Provider Name"
      CustomActionProviderCategory:
        default: "Custom Action Provider Category"
      CustomActionProviderVersion:
        default: "Custom Action Provider Version"

Parameters: 
    # You can provide these parameters in your CreateProject API call.
  ProjectId:
    Type: String
    Description: Prefix that will be used for AWS resources generated by the template.
    Default: ec2-codepipeline-builders

  CustomActionProviderName:
    Type: String
    Description: Name of the custom action provider (used in CodePipeline Console UI).
    Default: BuildUpdatedLinuxAmi

  CustomActionProviderCategory:
    Type: String
    Description: Category of the custom action provider (used in CodePipeline Console UI).
    AllowedValues:
      - Build
      - Deploy
      - Invoke
      - Test
    Default: Build

  CustomActionProviderVersion:
    Type: String
    Description: Version of the custom action provider (used in CodePipeline Console UI).
    Default: '1'
  AutomationServiceRole: 
    Description: The name of the role that allows Automation to perform the actions on your behalf.
    Type: String
  SsmDocumentName:
    Description: System Manager Automation Document
    Type: String
    Default: GoldenUpdatedLinuxAmi
  SsmDocumentVersion:
    Description: System Manager Automation Document Version
    Type: String
    Default: '1'
Resources: 

  # Supporting Lambda Functions 
  UpdateSsmParameterHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: Update SSM Paramater.
      CodeUri: lambda/update-ssm-paramater
      Handler: lambda.lambda_handler
      Runtime: python3.7
      Role: !GetAtt UpdateSsmParameterRole.Arn
      MemorySize: 128
      Timeout: 15

  JobCompletionHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: Handles result of job flow execution.
      CodeUri: lambda/job-completion-handler
      Handler: lambda.lambda_handler
      Runtime: python3.7
      Role: !GetAtt JobCompletionHandlerExecutionRole.Arn
      MemorySize: 128
      Timeout: 15

  JobApi:
    Type: AWS::Serverless::Function
    Properties:
      Description: Runs and tracks SSM commands on EC2 instances.
      CodeUri: lambda/job
      Handler: lambda.lambda_handler
      Runtime: python3.7
      Role: !GetAtt JobApiExecutionRole.Arn
      MemorySize: 128
      Timeout: 15
      Environment:
        Variables:
          SSM_DOCUMENT_NAME: !Ref SsmDocumentName
          SSM_DOCUMENT_VERSION: !Ref SsmDocumentVersion

  # CodePipeline Polling Function
  CodePipelinePoller:
    Type: AWS::Serverless::Function
    Properties:
      Description: Polls CodePipeline for Custom Actions.
      CodeUri: lambda/jobpoller
      Handler: lambda.lambda_handler
      Runtime: python3.7
      Role: !GetAtt CodePipelinePollerExecutionRole.Arn
      MemorySize: 128
      Timeout: 15
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref Ec2BuilderStateMachine
          CUSTOM_ACTION_PROVIDER_NAME: !Ref CustomActionProviderName
          CUSTOM_ACTION_PROVIDER_CATEGORY: !Ref CustomActionProviderCategory
          CUSTOM_ACTION_PROVIDER_VERSION: !Ref CustomActionProviderVersion
          
      Events:
        # This event is used to react on started instances of the Custom Action
        CodePipelineActionStartedEvent:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source: 
                - "aws.codepipeline"
              detail-type: 
                - "CodePipeline Action Execution State Change"
              detail: 
                state: 
                  - "STARTED"
        # This event is needed to make Custom Actions as completed once build is done.
        # TODO: replace with custom CloudWatch event at the end of Step Functions flow
        CheckCodePipelineScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)

 
  # Step Functions Flow
  Ec2BuilderStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub "${ProjectId}-build-flow"
      DefinitionString: !Sub |-
        {
          "Comment": "A description of Automation Proccess",
          "StartAt": "Start Automation Execution",
          "States": {
            "Start Automation Execution": {
              "Type": "Task",
              "Resource": "${JobApi.Arn}",
              "InputPath": "$",
              "ResultPath": "$.lambdaResult",
              "OutputPath": "$",
              "Parameters": {
                "command": "run"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "Wait For Automation To Complete",
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "ResultPath": "$.errorDetails",
                  "Next": "Report Completion"
                }
              ]
            },
            "Wait For Automation To Complete": {
              "Type": "Wait",
              "Seconds": 30,
              "Next": "Check Automation Status"
            },
            "Check Automation Status": {
              "Type": "Task",
              "Resource": "${JobApi.Arn}",
              "InputPath": "$",
              "ResultPath": "$.lambdaResult",
              "OutputPath": "$",
              "Parameters": {
                "command": "status",
                "automationExecutionId.$": "$.lambdaResult.automationExecutionId"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "Automation Completed?",
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "ResultPath": "$.errorDetails",
                  "Next": "Report Completion"
                }
              ]
            },
            "Report Completion": {
              "Type": "Task",
              "Resource": "${JobCompletionHandler.Arn}",
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "End": true
            },
            "Automation Completed?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.lambdaResult.status",
                  "StringMatches": "Success",
                  "Comment": "Success",
                  "Next": "Pass"
                },
                {
                  "Variable": "$.lambdaResult.status",
                  "StringMatches": "Failed",
                  "Comment": "Failed",
                  "Next": "Fail"
                }
              ],
              "OutputPath": "$",
              "Default": "Wait For Automation To Complete"
            },
            "Pass": {
              "Type": "Pass",
              "End": true
            },
            "Fail": {
              "Type": "Fail",
              "Error": "Automation Error",
              "Cause": "Error on Automation Execution",
              "Comment": "Error on Automation Execution"
            }
          }
        }
      RoleArn: !GetAtt Ec2BuilderStateMachineExecutionRole.Arn

  # Lambda Roles
  UpdateSsmParameterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
  JobCompletionHandlerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole    

  CodePipelinePollerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codepipeline:PollForJobs
                  - codepipeline:GetJobDetails
                  - codepipeline:AcknowledgeJob
                  - codepipeline:PutJobSuccessResult
                  - codepipeline:PutJobFailureResult
                Resource: "*"
              - Effect: Allow
                Action:
                  - states:DescribeExecution
                  - states:StartExecution
                Resource: "*"
  JobApiExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - iam:GetRole
                  - iam:PassRole
                Resource:  !Sub
                  - "arn:aws:iam::${AWS::AccountId}:role/${automationservicerole}"
                  -  automationservicerole: !Ref AutomationServiceRole                   
  


  # Step Functions Role

  Ec2BuilderStateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                # TODO: restrict resources
                Resource: "*"
