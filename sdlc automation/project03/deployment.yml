AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Custom AWS CodePipeline action that enables EC2 build nodes.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: General
      Parameters:
      - ProjectId
    - Label:
        default: Custom Action Settings
      Parameters:
      - CustomActionProviderName
      - CustomActionProviderCategory
      - CustomActionProviderVersion
    ParameterLabels:
      ProjectId:
        default: Project ID
      CustomActionProviderName:
        default: Custom Action Provider Name
      CustomActionProviderCategory:
        default: Custom Action Provider Category
      CustomActionProviderVersion:
        default: Custom Action Provider Version
Parameters:
  ProjectId:
    Type: String
    Description: Prefix that will be used for AWS resources generated by the template.
    Default: ec2-codepipeline-builders
  CustomActionProviderName:
    Type: String
    Description: Name of the custom action provider (used in CodePipeline Console
      UI).
    Default: BuildUpdatedLinuxAmi
  CustomActionProviderCategory:
    Type: String
    Description: Category of the custom action provider (used in CodePipeline Console
      UI).
    AllowedValues:
    - Build
    - Deploy
    - Invoke
    - Test
    Default: Build
  CustomActionProviderVersion:
    Type: String
    Description: Version of the custom action provider (used in CodePipeline Console
      UI).
Resources:
  JobCompletionHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: Handles result of job flow execution.
      CodeUri: s3://robudex-deployment-bucket/4b10ec6d5b6166a13c4f81f49b574ce6
      Handler: lambda.lambda_handler
      Runtime: python3.7
      Role:
        Fn::GetAtt:
        - JobCompletionHandlerExecutionRole
        - Arn
      MemorySize: 128
      Timeout: 15
  JobApi:
    Type: AWS::Serverless::Function
    Properties:
      Description: Runs and tracks SSM commands on EC2 instances.
      CodeUri: s3://robudex-deployment-bucket/893caa36f1fdbb3ab6e6509a390da9a8
      Handler: lambda.lambda_handler
      Runtime: python3.7
      Role:
        Fn::GetAtt:
        - JobApiExecutionRole
        - Arn
      MemorySize: 128
      Timeout: 15
      Environment:
        Variables:
          SSM_DOCUMENT_NAME: Latest-Robudex-UpdateLinuxAmi
          SSM_DOCUMENT_VERSION: '1'
  CodePipelinePoller:
    Type: AWS::Serverless::Function
    Properties:
      Description: Polls CodePipeline for Custom Actions.
      CodeUri: s3://robudex-deployment-bucket/6e5f3a0d732a9c7fbb5e41eea89ccb0b
      Handler: lambda.lambda_handler
      Runtime: python3.7
      Role:
        Fn::GetAtt:
        - CodePipelinePollerExecutionRole
        - Arn
      MemorySize: 128
      Timeout: 15
      Environment:
        Variables:
          STATE_MACHINE_ARN:
            Ref: Ec2BuilderStateMachine
          CUSTOM_ACTION_PROVIDER_NAME:
            Ref: CustomActionProviderName
          CUSTOM_ACTION_PROVIDER_CATEGORY:
            Ref: CustomActionProviderCategory
          CUSTOM_ACTION_PROVIDER_VERSION:
            Ref: CustomActionProviderVersion
      Events:
        CodePipelineActionStartedEvent:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
              - aws.codepipeline
              detail-type:
              - CodePipeline Action Execution State Change
              detail:
                state:
                - STARTED
        CheckCodePipelineScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)
  Ec2BuilderStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName:
        Fn::Sub: ${ProjectId}-build-flow
      DefinitionString:
        Fn::Sub: "{\n  \"Comment\": \"A description of Automation Proccess\",\n  \"\
          StartAt\": \"Start Automation Execution\",\n  \"States\": {\n    \"Start\
          \ Automation Execution\": {\n      \"Type\": \"Task\",\n      \"Resource\"\
          : \"${JobApi.Arn}\",\n      \"InputPath\": \"$\",\n      \"ResultPath\"\
          : \"$.lambdaResult\",\n      \"OutputPath\": \"$\",\n      \"Parameters\"\
          : {\n        \"command\": \"run\"\n      },\n      \"Retry\": [\n      \
          \  {\n          \"ErrorEquals\": [\n            \"Lambda.ServiceException\"\
          ,\n            \"Lambda.AWSLambdaException\",\n            \"Lambda.SdkClientException\"\
          \n          ],\n          \"IntervalSeconds\": 2,\n          \"MaxAttempts\"\
          : 6,\n          \"BackoffRate\": 2\n        }\n      ],\n      \"Next\"\
          : \"Wait For Automation To Complete\",\n      \"Catch\": [\n        {\n\
          \          \"ErrorEquals\": [\n            \"States.ALL\"\n          ],\n\
          \          \"ResultPath\": \"$.errorDetails\",\n          \"Next\": \"Report\
          \ Completion\"\n        }\n      ]\n    },\n    \"Wait For Automation To\
          \ Complete\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 30,\n   \
          \   \"Next\": \"Check Automation Status\"\n    },\n    \"Check Automation\
          \ Status\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${JobApi.Arn}\"\
          ,\n      \"InputPath\": \"$\",\n      \"ResultPath\": \"$.lambdaResult\"\
          ,\n      \"OutputPath\": \"$\",\n      \"Parameters\": {\n        \"command\"\
          : \"status\",\n        \"automationExecutionId.$\": \"$.lambdaResult.automationExecutionId\"\
          \n      },\n      \"Retry\": [\n        {\n          \"ErrorEquals\": [\n\
          \            \"Lambda.ServiceException\",\n            \"Lambda.AWSLambdaException\"\
          ,\n            \"Lambda.SdkClientException\"\n          ],\n          \"\
          IntervalSeconds\": 2,\n          \"MaxAttempts\": 6,\n          \"BackoffRate\"\
          : 2\n        }\n      ],\n      \"Next\": \"Automation Completed?\",\n \
          \     \"Catch\": [\n        {\n          \"ErrorEquals\": [\n          \
          \  \"States.ALL\"\n          ],\n          \"ResultPath\": \"$.errorDetails\"\
          ,\n          \"Next\": \"Report Completion\"\n        }\n      ]\n    },\n\
          \    \"Report Completion\": {\n      \"Type\": \"Task\",\n      \"Resource\"\
          : \"${JobCompletionHandler.Arn}\",\n      \"Retry\": [\n        {\n    \
          \      \"ErrorEquals\": [\n            \"Lambda.ServiceException\",\n  \
          \          \"Lambda.AWSLambdaException\",\n            \"Lambda.SdkClientException\"\
          \n          ],\n          \"IntervalSeconds\": 2,\n          \"MaxAttempts\"\
          : 6,\n          \"BackoffRate\": 2\n        }\n      ],\n      \"End\":\
          \ true\n    },\n    \"Automation Completed?\": {\n      \"Type\": \"Choice\"\
          ,\n      \"Choices\": [\n        {\n          \"Variable\": \"$.lambdaResult.status\"\
          ,\n          \"StringMatches\": \"Success\",\n          \"Comment\": \"\
          Success\",\n          \"Next\": \"Pass\"\n        },\n        {\n      \
          \    \"Variable\": \"$.lambdaResult.status\",\n          \"StringMatches\"\
          : \"Failed\",\n          \"Comment\": \"Failed\",\n          \"Next\": \"\
          Fail\"\n        }\n      ],\n      \"OutputPath\": \"$\",\n      \"Default\"\
          : \"Wait For Automation To Complete\"\n    },\n    \"Pass\": {\n      \"\
          Type\": \"Pass\",\n      \"End\": true\n    },\n    \"Fail\": {\n      \"\
          Type\": \"Fail\",\n      \"Error\": \"Automation Error\",\n      \"Cause\"\
          : \"Error on Automation Execution\",\n      \"Comment\": \"Error on Automation\
          \ Execution\"\n    }\n  }\n}"
      RoleArn:
        Fn::GetAtt:
        - Ec2BuilderStateMachineExecutionRole
        - Arn
  JobCompletionHandlerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  CodePipelinePollerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - codepipeline:PollForJobs
            - codepipeline:GetJobDetails
            - codepipeline:AcknowledgeJob
            - codepipeline:PutJobSuccessResult
            - codepipeline:PutJobFailureResult
            Resource: '*'
          - Effect: Allow
            Action:
            - states:DescribeExecution
            - states:StartExecution
            Resource: '*'
  JobApiExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ssm:*
            Resource: '*'
  Ec2BuilderRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
  Ec2BuilderInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: ec2-builder-instance-profile
      Roles:
      - Ref: Ec2BuilderRole
  Ec2BuilderStateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - Fn::Sub: states.${AWS::Region}.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: StatesExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: '*'
